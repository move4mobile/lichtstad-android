package com.move4mobile.context;

import android.app.Activity;
import android.app.Application;
import android.content.Context;
import android.content.res.Configuration;
import android.content.res.Resources;
import android.os.Build;
import android.os.Bundle;
import android.support.annotation.StringRes;
import android.util.Log;

import java.util.Locale;

/**
 * This class injects a new language into a context.
 * <p>
 * It is intended to be used for apps which do not support many languages.
 * In this case, it is often strange to see a string,
 * like the ones generated by a {@link java.text.DateFormat}, in a different language.
 */
public class ContextFixer implements Application.ActivityLifecycleCallbacks {

    private static final String TAG = ContextFixer.class.getSimpleName();

    @StringRes
    private final int localeLanguage;

    private ContextFixer(@StringRes int localeLanguage) {
        this.localeLanguage = localeLanguage;
    }

    /**
     * Start fixing an application. This creates a new {@link ContextFixer} and registers it to the
     * {@link Application#registerActivityLifecycleCallbacks(Application.ActivityLifecycleCallbacks)}
     * Whenever a new {@link Activity} is created, its locale is fixed to the language as specified.
     *
     * This should be the first call in {@link Application#onCreate()} after the super call
     *
     * @param application The application to fix
     * @param localeLanguage A resource ID pointing to a language string. Expected 2 letter lowercase ISO 639 code. If the string is the empty string, no fix is applied.
     * @return The {@linkplain ContextFixer} that has been created.
     */
    public static ContextFixer startFixing(Application application, @StringRes int localeLanguage) {
        ContextFixer fixer = new ContextFixer(localeLanguage);
        fixContextIfRequired(application, localeLanguage);
        application.registerActivityLifecycleCallbacks(fixer);
        return fixer;
    }

    @Override
    public void onActivityCreated(Activity activity, Bundle savedInstanceState) {
        fixContextIfRequired(activity, localeLanguage);
    }

    @Override
    public void onActivityStarted(Activity activity) {

    }

    @Override
    public void onActivityResumed(Activity activity) {

    }

    @Override
    public void onActivityPaused(Activity activity) {

    }

    @Override
    public void onActivityStopped(Activity activity) {

    }

    @Override
    public void onActivitySaveInstanceState(Activity activity, Bundle outState) {

    }

    @Override
    public void onActivityDestroyed(Activity activity) {

    }

    /**
     * Sets the context language to the language as indicated by R.string.locale_language if necessary
     *
     * @param context The context to set the language of
     * @return true if the context language has been changed, false otherwise
     */
    public static boolean fixContextIfRequired(Context context, @StringRes int localeLanguage) {
        String expectedLanguage = context.getString(localeLanguage);
        if (expectedLanguage.equals("")) {
            return false;
        }
        if (!expectedLanguage.equals(context.getResources().getConfiguration().locale.getLanguage())) {
            setLanguage(context, expectedLanguage);
            return true;
        }
        return false;
    }

    private static void setLanguage(Context context, String language) {
        Locale locale = new Locale(language);
        Locale.setDefault(locale);
        Resources resources = context.getResources();
        Configuration configuration = resources.getConfiguration();
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
            configuration.setLocale(locale);
        } else {
            configuration.locale = locale;
        }

        context.createConfigurationContext(configuration);
        Log.d(TAG, "Set " + context + " language to: " + language);
    }

}
